// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fetch

import (
	"context"
	"github.com/pduzinki/fpl-price-checker/internal/domain"
	"github.com/pduzinki/fpl-price-checker/internal/wrapper"
	"sync"
)

// Ensure, that PlayersGetterMock does implement PlayersGetter.
// If this is not the case, regenerate this file with moq.
var _ PlayersGetter = &PlayersGetterMock{}

// PlayersGetterMock is a mock implementation of PlayersGetter.
//
//	func TestSomethingThatUsesPlayersGetter(t *testing.T) {
//
//		// make and configure a mocked PlayersGetter
//		mockedPlayersGetter := &PlayersGetterMock{
//			GetPlayersFunc: func() ([]wrapper.Player, error) {
//				panic("mock out the GetPlayers method")
//			},
//		}
//
//		// use mockedPlayersGetter in code that requires PlayersGetter
//		// and then make assertions.
//
//	}
type PlayersGetterMock struct {
	// GetPlayersFunc mocks the GetPlayers method.
	GetPlayersFunc func() ([]wrapper.Player, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPlayers holds details about calls to the GetPlayers method.
		GetPlayers []struct {
		}
	}
	lockGetPlayers sync.RWMutex
}

// GetPlayers calls GetPlayersFunc.
func (mock *PlayersGetterMock) GetPlayers() ([]wrapper.Player, error) {
	if mock.GetPlayersFunc == nil {
		panic("PlayersGetterMock.GetPlayersFunc: method is nil but PlayersGetter.GetPlayers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPlayers.Lock()
	mock.calls.GetPlayers = append(mock.calls.GetPlayers, callInfo)
	mock.lockGetPlayers.Unlock()
	return mock.GetPlayersFunc()
}

// GetPlayersCalls gets all the calls that were made to GetPlayers.
// Check the length with:
//
//	len(mockedPlayersGetter.GetPlayersCalls())
func (mock *PlayersGetterMock) GetPlayersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPlayers.RLock()
	calls = mock.calls.GetPlayers
	mock.lockGetPlayers.RUnlock()
	return calls
}

// Ensure, that DailyPlayersDataAdderMock does implement DailyPlayersDataAdder.
// If this is not the case, regenerate this file with moq.
var _ DailyPlayersDataAdder = &DailyPlayersDataAdderMock{}

// DailyPlayersDataAdderMock is a mock implementation of DailyPlayersDataAdder.
//
//	func TestSomethingThatUsesDailyPlayersDataAdder(t *testing.T) {
//
//		// make and configure a mocked DailyPlayersDataAdder
//		mockedDailyPlayersDataAdder := &DailyPlayersDataAdderMock{
//			AddFunc: func(ctx context.Context, date string, players domain.DailyPlayersData) error {
//				panic("mock out the Add method")
//			},
//		}
//
//		// use mockedDailyPlayersDataAdder in code that requires DailyPlayersDataAdder
//		// and then make assertions.
//
//	}
type DailyPlayersDataAdderMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, date string, players domain.DailyPlayersData) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Date is the date argument value.
			Date string
			// Players is the players argument value.
			Players domain.DailyPlayersData
		}
	}
	lockAdd sync.RWMutex
}

// Add calls AddFunc.
func (mock *DailyPlayersDataAdderMock) Add(ctx context.Context, date string, players domain.DailyPlayersData) error {
	if mock.AddFunc == nil {
		panic("DailyPlayersDataAdderMock.AddFunc: method is nil but DailyPlayersDataAdder.Add was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Date    string
		Players domain.DailyPlayersData
	}{
		Ctx:     ctx,
		Date:    date,
		Players: players,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, date, players)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedDailyPlayersDataAdder.AddCalls())
func (mock *DailyPlayersDataAdderMock) AddCalls() []struct {
	Ctx     context.Context
	Date    string
	Players domain.DailyPlayersData
} {
	var calls []struct {
		Ctx     context.Context
		Date    string
		Players domain.DailyPlayersData
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}
