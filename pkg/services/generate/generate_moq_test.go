// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package generate

import (
	"context"
	"github.com/pduzinki/fpl-price-checker/pkg/domain"
	"sync"
)

// Ensure, that DailyPlayersDataGetterMock does implement DailyPlayersDataGetter.
// If this is not the case, regenerate this file with moq.
var _ DailyPlayersDataGetter = &DailyPlayersDataGetterMock{}

// DailyPlayersDataGetterMock is a mock implementation of DailyPlayersDataGetter.
//
//	func TestSomethingThatUsesDailyPlayersDataGetter(t *testing.T) {
//
//		// make and configure a mocked DailyPlayersDataGetter
//		mockedDailyPlayersDataGetter := &DailyPlayersDataGetterMock{
//			GetByDateFunc: func(ctx context.Context, date string) (domain.DailyPlayersData, error) {
//				panic("mock out the GetByDate method")
//			},
//		}
//
//		// use mockedDailyPlayersDataGetter in code that requires DailyPlayersDataGetter
//		// and then make assertions.
//
//	}
type DailyPlayersDataGetterMock struct {
	// GetByDateFunc mocks the GetByDate method.
	GetByDateFunc func(ctx context.Context, date string) (domain.DailyPlayersData, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetByDate holds details about calls to the GetByDate method.
		GetByDate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Date is the date argument value.
			Date string
		}
	}
	lockGetByDate sync.RWMutex
}

// GetByDate calls GetByDateFunc.
func (mock *DailyPlayersDataGetterMock) GetByDate(ctx context.Context, date string) (domain.DailyPlayersData, error) {
	if mock.GetByDateFunc == nil {
		panic("DailyPlayersDataGetterMock.GetByDateFunc: method is nil but DailyPlayersDataGetter.GetByDate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Date string
	}{
		Ctx:  ctx,
		Date: date,
	}
	mock.lockGetByDate.Lock()
	mock.calls.GetByDate = append(mock.calls.GetByDate, callInfo)
	mock.lockGetByDate.Unlock()
	return mock.GetByDateFunc(ctx, date)
}

// GetByDateCalls gets all the calls that were made to GetByDate.
// Check the length with:
//
//	len(mockedDailyPlayersDataGetter.GetByDateCalls())
func (mock *DailyPlayersDataGetterMock) GetByDateCalls() []struct {
	Ctx  context.Context
	Date string
} {
	var calls []struct {
		Ctx  context.Context
		Date string
	}
	mock.lockGetByDate.RLock()
	calls = mock.calls.GetByDate
	mock.lockGetByDate.RUnlock()
	return calls
}

// Ensure, that PriceChangeReportAdderMock does implement PriceChangeReportAdder.
// If this is not the case, regenerate this file with moq.
var _ PriceChangeReportAdder = &PriceChangeReportAdderMock{}

// PriceChangeReportAdderMock is a mock implementation of PriceChangeReportAdder.
//
//	func TestSomethingThatUsesPriceChangeReportAdder(t *testing.T) {
//
//		// make and configure a mocked PriceChangeReportAdder
//		mockedPriceChangeReportAdder := &PriceChangeReportAdderMock{
//			AddFunc: func(ctx context.Context, date string, report domain.PriceChangeReport) error {
//				panic("mock out the Add method")
//			},
//		}
//
//		// use mockedPriceChangeReportAdder in code that requires PriceChangeReportAdder
//		// and then make assertions.
//
//	}
type PriceChangeReportAdderMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(ctx context.Context, date string, report domain.PriceChangeReport) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Date is the date argument value.
			Date string
			// Report is the report argument value.
			Report domain.PriceChangeReport
		}
	}
	lockAdd sync.RWMutex
}

// Add calls AddFunc.
func (mock *PriceChangeReportAdderMock) Add(ctx context.Context, date string, report domain.PriceChangeReport) error {
	if mock.AddFunc == nil {
		panic("PriceChangeReportAdderMock.AddFunc: method is nil but PriceChangeReportAdder.Add was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Date   string
		Report domain.PriceChangeReport
	}{
		Ctx:    ctx,
		Date:   date,
		Report: report,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(ctx, date, report)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedPriceChangeReportAdder.AddCalls())
func (mock *PriceChangeReportAdderMock) AddCalls() []struct {
	Ctx    context.Context
	Date   string
	Report domain.PriceChangeReport
} {
	var calls []struct {
		Ctx    context.Context
		Date   string
		Report domain.PriceChangeReport
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}
